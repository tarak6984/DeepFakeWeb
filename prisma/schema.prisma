// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  role          UserRole  @default(USER)
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  analyses      Analysis[]
  preferences   UserPreferences?
  usage         UsageTracking?
  apiKeys       ApiKey[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
}

// Custom Models for Deepfake Detection
model Analysis {
  id              String   @id @default(cuid())
  userId          String
  filename        String
  originalName    String
  fileType        String
  fileSize        Int
  filePath        String?  // Path to stored file
  thumbnailPath   String?  // Path to thumbnail
  
  // Analysis Results
  confidence      Float
  prediction      Prediction
  riskLevel       RiskLevel
  processingTime  Int      // in milliseconds
  
  // Detailed Results
  fakeConfidence  Float
  realConfidence  Float
  modelsUsed      String   // JSON array of model names
  
  // Category Breakdown
  authenticPercentage    Int
  manipulatedPercentage  Int
  inconclusivePercentage Int
  
  // Metadata
  mediaType       MediaType
  duration        Float?   // For audio/video
  resolution      String?  // For images/video
  frameCount      Int?     // For video
  sampleRate      Int?     // For audio
  
  // Analysis Details (JSON)
  detailedResults Json?    // Store complex analysis data
  explanation     Json?    // AI explanation data
  
  // System Fields
  analysisId      String   @unique // External API analysis ID
  cacheHit        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("analyses")
  @@index([userId, createdAt])
  @@index([prediction])
  @@index([mediaType])
}

model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  
  // Analysis Preferences
  maxHistoryItems       Int     @default(50)
  showDetailedAnalysis  Boolean @default(true)
  autoDownloadReports   Boolean @default(false)
  enableNotifications   Boolean @default(true)
  
  // Privacy Settings
  shareAnalytics        Boolean @default(false)
  dataRetentionDays     Int     @default(90)
  anonymousMode         Boolean @default(false)
  
  // UI Preferences
  theme                 Theme   @default(SYSTEM)
  language              String  @default("en")
  timeZone              String  @default("UTC")
  
  // API Settings
  apiRateLimit          Int     @default(100) // per hour
  webhookUrl            String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

model UsageTracking {
  id                 String   @id @default(cuid())
  userId             String   @unique
  
  // Current Month Usage
  monthlyScans       Int      @default(0)
  currentMonth       Int      // Month number (1-12)
  currentYear        Int      // Year
  
  // Total Usage
  totalScans         Int      @default(0)
  totalProcessingTime BigInt   @default(0) // in milliseconds
  
  // Usage by Media Type
  imageScans         Int      @default(0)
  audioScans         Int      @default(0)
  videoScans         Int      @default(0)
  
  // Usage by Result
  authenticResults   Int      @default(0)
  manipulatedResults Int      @default(0)
  inconclusiveResults Int     @default(0)
  
  // Limits
  monthlyLimit       Int      @default(100) // Based on plan
  dailyLimit         Int      @default(20)  // Based on plan
  
  // Last Reset
  lastMonthlyReset   DateTime @default(now())
  lastDailyReset     DateTime @default(now())
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usage_tracking")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String   // User-defined name for the key
  keyHash     String   @unique // Hashed API key
  keyPrefix   String   // First few chars for display
  
  // Permissions
  permissions String   @default("analyze") // JSON array: ["analyze", "batch", "webhook"]
  
  // Usage
  usageCount  Int      @default(0)
  lastUsed    DateTime?
  
  // Status
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
  @@index([userId])
}

// System Models
model SystemStats {
  id                  String   @id @default(cuid())
  date                DateTime @unique @default(now())
  
  // Daily Stats
  totalAnalyses       Int      @default(0)
  totalUsers          Int      @default(0)
  totalProcessingTime BigInt   @default(0)
  
  // Analysis Breakdown
  imageAnalyses       Int      @default(0)
  audioAnalyses       Int      @default(0)
  videoAnalyses       Int      @default(0)
  
  // Result Breakdown
  authenticResults    Int      @default(0)
  manipulatedResults  Int      @default(0)
  inconclusiveResults Int      @default(0)
  
  // Performance
  avgProcessingTime   Float    @default(0)
  apiResponseTime     Float    @default(0)
  errorRate           Float    @default(0)
  
  createdAt           DateTime @default(now())
  
  @@map("system_stats")
}

// Enums
enum UserRole {
  USER
  PREMIUM
  ADMIN
  SUPER_ADMIN
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum Prediction {
  AUTHENTIC
  MANIPULATED
  INCONCLUSIVE
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}